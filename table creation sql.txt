CREATE TABLE IF NOT EXISTS "user" (
    player_id uuid PRIMARY KEY NOT NULL UNIQUE,
    nick text,
    email text,
    pass text,
    account_created date
);

CREATE TABLE IF NOT EXISTS facebook_login (
    player_id uuid REFERENCES "user" (player_id) NOT NULL UNIQUE,
    access_token text,
    expires_in bigint,
    signed_request text,
    user_id text
);

CREATE TABLE IF NOT EXISTS google_login (
    player_id uuid REFERENCES "user" (player_id) NOT NULL UNIQUE,
    real_name text,
    icon_url text,
    jwt_issuer text,
    google_account_id bigint,
    azp text,
    client_id text,
    token_creation_date bigint,
    token_expiration_date bigint
);

CREATE TABLE IF NOT EXISTS chat (
    chat_id uuid PRIMARY KEY NOT NULL UNIQUE,
    player_id uuid REFERENCES "user" (player_id) NOT NULL,
    other_side uuid REFERENCES "user" (player_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS message (
    chat_id uuid REFERENCES chat (chat_id) NOT NULL,
    time_sent timestamp,
    message_body text
);

CREATE TABLE IF NOT EXISTS clan (
    clan_id uuid PRIMARY KEY NOT NULL UNIQUE,
    creator_id uuid REFERENCES "user" (player_id) NOT NULL UNIQUE,
    name text,
    roles text
);

CREATE TABLE IF NOT EXISTS clan_member (
    clan_id uuid REFERENCES clan (clan_id) NOT NULL,
    player_id uuid REFERENCES "user" (player_id) NOT NULL UNIQUE,
    role text
);

CREATE TABLE IF NOT EXISTS clan_chat (
    chat_id uuid PRIMARY KEY NOT NULL UNIQUE,
    player_id uuid REFERENCES "user" (player_id) NOT NULL,
    clan_id uuid REFERENCES clan (clan_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS clan_message (
    chat_id uuid REFERENCES clan_chat (chat_id) NOT NULL,
    time_sent timestamp,
    message_body text
);

CREATE TABLE IF NOT EXISTS contact (
    player_id uuid REFERENCES "user" (player_id) NOT NULL,
    contact_id uuid REFERENCES "user" (player_id) NOT NULL,
    status text
);

CREATE TABLE IF NOT EXISTS class (
    class_id uuid PRIMARY KEY UNIQUE NOT NULL,
    name text,
    base_health bigint,
    health_scaling bigint,
    base_health_regen bigint,
    health_regen_scaling bigint,
    base_attack bigint,
    attack_scaling bigint,
    base_defense bigint,
    defense_scaling bigint,
    base_mana bigint,
    mana_scaling bigint,
    mana_regen bigint,
    mana_regen_scaling bigint
);

CREATE TABLE IF NOT EXISTS character (
    character_id uuid PRIMARY KEY UNIQUE NOT NULL,
    player_id uuid REFERENCES "user" (player_id) NOT NULL,
    name text,
    class_id uuid REFERENCES class (class_id) NOT NULL,
    level bigint,
    xp bigint,
    xp_next_lvl bigint,
    health bigint,
    attack bigint,
    defense bigint,
    location point
);

CREATE TABLE IF NOT EXISTS ability (
    ability_id uuid PRIMARY KEY UNIQUE NOT NULL,
    class_id uuid REFERENCES class (class_id) NOT NULL,
    name text,
    unlock_level bigint,
    damage bigint,
    damage_scaling bigint,
    mana_cost bigint,
    mana_cost_scaling bigint,
    effect text,
    effect_duration interval
);

CREATE TABLE IF NOT EXISTS storage(
    storage_id uuid PRIMARY KEY NOT NULL UNIQUE,
    character_id uuid REFERENCES character (character_id) NOT NULL,
    name text,
    size point,
    weight_limit bigint
);

CREATE TABLE IF NOT EXISTS item(
    item_id uuid PRIMARY KEY NOT NULL UNIQUE,
    name text,
    description text,
    price money,
    effect text,
    size bigint,
    weight bigint
);

CREATE TABLE IF NOT EXISTS item_inventory_instance(
    item_id uuid REFERENCES item(item_id) NOT NULL,
    storage_id uuid REFERENCES storage (storage_id) NOT NULL,
    equipped bool
);

CREATE TABLE IF NOT EXISTS level(
    level_id uuid PRIMARY KEY NOT NULL UNIQUE,
    map text,
    starting_point point,
    end_point point,
    enemy_spawn_points path
);

CREATE TABLE IF NOT EXISTS game(
    game_id uuid PRIMARY KEY UNIQUE NOT NULL,
    character_id uuid REFERENCES character (character_id),
    level_id uuid REFERENCES level (level_id)
);

CREATE TABLE IF NOT EXISTS item_level_instance(
    item_id uuid REFERENCES item (item_id),
    location point
);

CREATE TABLE IF NOT EXISTS quest_givers(
    quest_giver_id uuid PRIMARY KEY UNIQUE NOT NULL,
    name text,
    level uuid REFERENCES level (level_id),
    location point
);

CREATE TABLE IF NOT EXISTS quest(
    quest_id uuid PRIMARY KEY UNIQUE NOT NULL,
    quest_giver_id uuid REFERENCES quest_givers (quest_giver_id) NOT NULL,
    name text,
    description text,
    monsters_killed bigint,
    item_found uuid REFERENCES item (item_id),
    character_level bigint,
    reward json,
    previous_quest uuid REFERENCES quest (quest_id)
);

CREATE TABLE IF NOT EXISTS spawn_conditions(
    sc_id uuid PRIMARY KEY UNIQUE NOT NULL,
    min_player_level bigint,
    max_player_level bigint,
    level uuid REFERENCES level (level_id),
    previous_quest uuid REFERENCES quest (quest_id)
);

CREATE TABLE IF NOT EXISTS enemy(
    enemy_id uuid PRIMARY KEY UNIQUE NOT NULL,
    name text,
    base_health bigint,
    base_damage bigint,
    base_defense bigint,
    base_death_reward json,
    spawn_condition uuid REFERENCES spawn_conditions (sc_id)
);

ALTER TABLE spawn_conditions
ADD COLUMN previous_monster uuid REFERENCES enemy (enemy_id);

CREATE TABLE IF NOT EXISTS enemy_instance(
    enemy_instance_id uuid PRIMARY KEY NOT NULL UNIQUE,
    enemy_id uuid REFERENCES enemy (enemy_id),
    location point,
    health bigint,
    damage bigint,
    defense bigint,
    death_reward json,
    level bigint
);

CREATE TABLE IF NOT EXISTS item_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    item_id uuid REFERENCES item (item_id),
    level_id uuid REFERENCES level (level_id),
    time timestamp DEFAULT now(),
    location point,
    use text
);

CREATE TABLE IF NOT EXISTS quest_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    quest_id uuid REFERENCES quest (quest_id),
    quest_started timestamp DEFAULT now(),
    quest_ended timestamp,
    time_taken interval,
    reward json,
    location point
);

CREATE TABLE IF NOT EXISTS damage_taken_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    character_id uuid REFERENCES character (character_id),
    enemy_id uuid REFERENCES enemy (enemy_id),
    damage_base bigint,
    damage_mitigated bigint,
    damage_taken bigint,
    location point,
    time timestamp DEFAULT now()
);

CREATE TABLE IF NOT EXISTS damage_dealt_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    character_id uuid REFERENCES character (character_id),
    enemy_id uuid REFERENCES enemy (enemy_id),
    damage_base bigint,
    damage_mitigated bigint,
    damage_taken bigint,
    location point,
    time timestamp DEFAULT now()
);

CREATE TABLE IF NOT EXISTS kill_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    character_id uuid REFERENCES character (character_id),
    enemy_id uuid REFERENCES enemy (enemy_id),
    last_ability uuid REFERENCES ability (ability_id),
    battle_start timestamp,
    battle_end timestamp DEFAULT now(),
    battle_length interval,
    damage_taken_by_player bigint,
    damage_dealt_by_player bigint,
    damage_mitigated_by_player bigint,
    reward json,
    location point,
    time timestamp DEFAULT now()
);

CREATE TABLE IF NOT EXISTS effect_log(
    no uuid PRIMARY KEY UNIQUE NOT NULL,
    character_id uuid REFERENCES character (character_id),
    enemy_id uuid REFERENCES enemy (enemy_id),
    effect text,
    effect_duration interval,
    location point,
    time timestamp DEFAULT now()
);